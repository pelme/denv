name: "Build Linux, Mac and static binaries"
on:
  # pull_request:
  #   types: [opened, synchronize, reopened]

  push:
    branches:
      - 'deni/gh-test'

jobs:
  build-linux-and-mac:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
        - os: macos-latest
          OSNAME: osx
        - os: ubuntu-latest
          OSNAME: linux
    steps:
    - name: Cache stack and stack-work
      uses: actions/cache@v2
      with:
        path: |
          ~/.stack
          ./.stack-work
        key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}
    - uses: actions/checkout@v2.3.1
    #- uses: cachix/install-nix-action@v11
    #  with:
    #    nix_path: nixpkgs=channel:nixos-19.09
    #- uses: cachix/cachix-action@v6
    #  with:
    #    name: deni
    #    signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
    #    # Only needed for private caches
    #    #authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - uses: actions/setup-haskell@v1.1
      with:
        ghc-version: '8.4.4' # Resolves to the latest point release of GHC 8.8
        # cabal-version: '3.0.0.0' # Exact version of Cabal
        enable-stack: true
        stack-version: '2.1.3'
    - run: echo "::set-env name=SHORT_SHA::$(git rev-parse --short HEAD)"
    - name: Stack setup
      run: stack --no-terminal setup --no-reinstall > /dev/null
    - name: Stack test
      run: stack --no-terminal test
    - name: Stack install
      run: stack --no-terminal install
    - name: Create release artifact
      run: |
        stack exec -- cp $(which denv) .
        tar -czf denv.tar.gz denv
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: v${{ github.ref }}
    #     body: |
    #       Automated release. Update with changelog.
    #     draft: true
    #     prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
    #     asset_path: ./denv.tar.gz
    #     asset_name: denv-${{ github.ref }}-${NAME}-x86_64.tar.gz
    #     asset_content_type: application/gzip
